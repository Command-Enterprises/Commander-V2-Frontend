user nginx nginx;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

# Modded from https://github.com/binary-person/womginx/blob/master/nginx.conf
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    include /etc/nginx/conf.d/*;
    map_hash_bucket_size 128;

    resolver 1.1.1.1;
  # resolver 1.1.1.3; <-- Uncomment this and comment out the above to block malicious sites and adult content
  # resolver 1.1.1.2; <-- Or uncomment this and comment out both the above to only block malicious sites

    # DDOS protection
    client_body_timeout 10s;
    client_header_timeout 10s;
    proxy_connect_timeout 20s;
    # See https://github.com/binary-person/womginx/blob/master/nginx.conf#L22C5-L23C77 for more info
    limit_req_zone $binary_remote_addr zone=limitreq:20m rate=30r/s;
    limit_req zone=limitreq burst=500 nodelay;
    limit_req_status 429;
    limit_conn_zone $binary_remote_addr zone=limitconn:20m;
    limit_conn limitconn 50;
    # Domain blacklist. This is demo-blacklisting www.example.com
    map $dest_host $blacklist {
        default 0;
        'www.example.com' 1;
    }
    # Blacklist user agent
    # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L36
    map $http_user_agent $blacklist_useragent {
        default 0;
        ~*(google|bing|yandex|msnbot) 1;
        ~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) 1;
        ~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) 1;
        ~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) 1;
        ~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) 1;
        ~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Wget|Widow|Zeus) 1;
        ~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw) 1;
    }
    # Set scheme appropriately
    map $http_x_forwarded_proto $relativescheme {
        default $http_x_forwarded_proto;
        '' $scheme;
    }

    # Websocket headers
    map $http_upgrade $connection_upgrade {
        default Upgrade;
        '' close;
    }

    map '' $proxy_prefix {
        default $relativescheme://$host;
    }

    map $targeturl $dest_host {
        default '';
        ~^https?://([^/]+) $1;
    }

    # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L67-L68
    map $targeturl $dest_fullwebsocketurl {
        default $targeturl;
        ~^ws(s)?://(.+)(\?commander_ws_origin_header=.+)$ http$1://$2;
        ~^ws(s)?://(.+) http$1://$2;
    }
    # Get targeturl destination from referrer
    map $http_referer $dest_referrerhost {
        default '';
        ~^https?://[^/]+/main(/[^_/]+_)?/(?<targeturl>https?://?[^/]+) $targeturl;
    }
    map $request_uri $dest_hostwithscheme {
        default '';
        ~^/main(/[^_/]+_)?/(https?://?[^/]+) $2;
    }
    # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L89-L90
    map $http_origin:womginxseparate:$request_uri $rewrite_origin {
        default $dest_hostwithscheme;
        # origin maybe exists, womginx_ws_origin_header exists
        ~^.+(\?commander_ws_origin_header=(.+))$ $2;
        # origin and womginx_ws_origin_header doesn't exist
        ~^:womginxseparate: '';
    }
    # 'commander_ws_origin_header' contain merged slashes from wombat-handler.js to avoid the middle server closing
    # the websocket connection because of the need to merge it. This is to undo that
    map $rewrite_origin $reslashed_origin {
        default $rewrite_origin;
        ~^(https?:/)([^/].*) $1/$2;
    }
    server {
        server_name localhost;

        listen 80;

        merge_slashes off;
        error_page 404 = @referrer-handler;

        # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L116-L118
        rewrite ^ $request_uri;

        # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L121-L123
        rewrite ^\/main(?<mod>\/[^\/_]+_)?(?<url_preslash>\/(?:http|ws)s?:\/)(?<url_postslash>[^\/].*) /main$mod$url_preslash/$url_postslash;

        # Add a slash after every URL that is proxied or rewritten on the '/main' path
        # and every query parameter on that URL
        rewrite ^(/main/https?://[^/?]*)/?(.*) $1/$2;

        set $commander_cookie 'womginx_are_you_a_bot=no; Path=/; HttpOnly';

        # Improves the overall user experience.
        # Learn more at https://github.com/binary-person/womginx/blob/master/nginx.conf#L132-L135
        location ~^/commanderaddcookie/\d+/(.+) {
            add_header Set-Cookie $commander_cookie;
            return 302 $1;
        }

        # Serve static files, deny access to .git and .hg directories, and ignore prefixes starting with /main/.
        # .hg meaning Mercurial, not to be confused with Mercury Workshop 
        # or any of their affiliated services and/or software
        location ~ ^(?!/(\.git|\.hg|main/)).*$ {
            add_header 'Set-Cookie' $commander_cookie;
            alias /opt/commander/public$uri;
            # If no file is found, pass it to @referrer-handler
        }
        location = / {
            if ($dest_referrerhost = '') {
                rewrite ^ /index.html last;
            }
            # If no file exists, pass it to @referrer-handler
            return 404;
        }
        location @referrer-handler {
            # If referrer doesn't exist, send 404 page
            if ($dest_referrerhost = '') {
                return 404;
            }
            # If it exists, send appropriate redirection
            return 302 $proxy_prefix/main/$dest_referrerhost$request_uri;
        }

        location /main {
            # To learn more about this whole section, please refer to 
            # https://github.com/binary-person/womginx/blob/master/nginx.conf#L168-L325
            proxy_hide_header Content-Security-Policy;
            proxy_set_header Accept-Encoding 'identity;q=1, *;q=0';
            proxy_hide_header Strict-Transport-Security;
            proxy_hide_header X-Frame-Options;
            proxy_set_header Referer $rewrite_referer;
            proxy_set_header Origin $reslashed_origin;
            proxy_cookie_domain ~(.*) $host;
            proxy_cookie_path ~(/.*) /main/$dest_hostwithscheme$1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_buffer_size 16k;
            proxy_busy_buffers_size 24k;
            proxy_buffers 4 16k;
            client_max_body_size 100M;

            location ~^/main(/[^_/]+_)?///(?<protocol_relative_url>.+) {
                rewrite ^/main(/[^_/]+_)?///(?<protocol_relative_url>.+) /main$1/$relativescheme://$protocol_relative_url last;
            }

            location ~^/main(/[^/_]+_)?(?!(/[^/_]+_)?/(http|ws)s?://|//)/(?<rewrite_url_with_scheme>.*) {
                return 302 $proxy_prefix/main$1/$relativescheme://$rewrite_url_with_scheme;
            }

            location ~^/main/\d*ws_/(?<targeturl>.+){
                proxy_http_version 1.1;
                
                proxy_pass $dest_fullwebsocketurl;
            }

            location ~^/main/\d*(im|oe)_/(?<targeturl>.+) {
                proxy_pass $targeturl;
            }

            location ~^/main/\d*(wkr|sw)_/(?<targeturl>.+) {
                proxy_pass $targeturl;
            }

            location ~^/main/\d*js_/(?<targeturl>.+) {
                sub_filter_once off;
                sub_filter_types *;
                sub_filter '.postMessage(' '.__WB_pmw(self.window).postMessage(';
                sub_filter '.postMessage (' '.__WB_pmw(self.window).postMessage (';
                sub_filter 'window.location' 'window.currentLocation';
                proxy_pass $targeturl;
            }

            location ~^/main/[^_/]+_/(?<redirecttargeturl>.+) {
                return 302 $proxy_prefix/main/$redirecttargeturl;
            }

            location ~^/main/(?<targeturl>.*)$ {
                if ($blacklist) {
                    return 403 'Sorry. The owner of this proxy decided to disallow access to this content.';
                }

                if ($blacklist_useragent) {
                    return 403 'Sorry, you are not allowed to access this content.';
                }

                if ($cookie_commander_are_you_a_bot != 'no') {
                    add_header Content-Type text/html always;
                    return 403 '<script>location.href="/commanderaddcookie/"+Date.now()+"/"+location.href</script>';
                }

                proxy_redirect ~^(https?://.+) $proxy_prefix/main/$1;

                sub_filter_once off;

                set $processed_flag_attribute 'commander-processed';

                sub_filter '<script src="//' '<script $processed_flag_attribute src="/main/js_/$relativescheme://';
                sub_filter '<script type="text/javascript" src="//' '<script type="text/javascript" $processed_flag_attribute src="/main/js_/$relativescheme://';
                sub_filter 'src="//' '$processed_flag_attribute src="/main/$relativescheme://';

                sub_filter '<script src="/' '<script $processed_flag_attribute src="/main/js_/$dest_hostwithscheme/';
                sub_filter '<script type="text/javascript" src="/' '<script type="text/javascript" $processed_flag_attribute src="/main/js_/$dest_hostwithscheme/';
                sub_filter 'src="/' '$processed_flag_attribute src="/main/$dest_hostwithscheme/';

                sub_filter '<script src="https://' '<script $processed_flag_attribute src="/main/js_/https://';
                sub_filter '<script type="text/javascript" src="https://' '<script type="text/javascript" $processed_flag_attribute src="/main/js_/https://';
                sub_filter 'src="https://' '$processed_flag_attribute src="/main/https://';

                sub_filter '<script src="https://' '<script $processed_flag_attribute src="/main/js_/https://';
                sub_filter '<script type="text/javascript" src="https://' '<script type="text/javascript" $processed_flag_attribute src="/main/js_/https://';
                sub_filter 'src="https://' '$processed_flag_attribute src="/main/https://';

                sub_filter '<script src="http://' '<script $processed_flag_attribute src="/main/js_/http://';
                sub_filter '<script type="text/javascript" src="http://' '<script type="text/javascript" $processed_flag_attribute src="/main/js_/http://';
                sub_filter 'src="http://' '$processed_flag_attribute src="/main/http://';

                sub_filter 'integrity="' 'nointegrity="';

                sub_filter 'http-equiv="Content-Security-Policy"' 'http-equiv="No-U-Content-Security-Policy"';

                sub_filter "<script src='//" "<script $processed_flag_attribute src='/main/js_/$relativescheme://";
                sub_filter "<script type='text/javascript' src='//" "<script type='text/javascript' $processed_flag_attribute src='/main/js_/$relativescheme://";
                sub_filter "src='//" "$processed_flag_attribute src='/main/$relativescheme://";

                sub_filter "<script src='/" "<script $processed_flag_attribute src='/main/js_/$dest_hostwithscheme/";
                sub_filter "<script type='text/javascript' src='/" "<script type='text/javascript' $processed_flag_attribute src='/main/js_/$dest_hostwithscheme/";
                sub_filter "src='/" "$processed_flag_attribute src='/main/$dest_hostwithscheme/";

                sub_filter "<script src='https://" "<script $processed_flag_attribute src='/main/js_/https://";
                sub_filter "<script type='text/javascript' src='https://" "<script type='text/javascript' $processed_flag_attribute src='/main/js_/https://";
                sub_filter "src='https://" "$processed_flag_attribute src='/main/https://";

                sub_filter "<script src='http://" "<script $processed_flag_attribute src='/main/js_/http://";
                sub_filter "<script type='text/javascript' src='http://" "<script type='text/javascript' $processed_flag_attribute src='/main/js_/http://";
                sub_filter "src='http://" "$processed_flag_attribute src='/main/http://";

                sub_filter "integrity='" "nointegrity='";

                sub_filter "http-equiv='Content-Security-Policy'" "http-equiv='No-U-Content-Security-Policy'";

                sub_filter '<head>' '<head>
    <script $processed_flag_attribute src="/wombat/dist/wombat.js"></script>
    <script $processed_flag_attribute src="/wombat-handler.js" processed-attribute="$processed_flag_attribute">
    </script>';

                proxy_pass $targeturl;
            }
        }
    }
}